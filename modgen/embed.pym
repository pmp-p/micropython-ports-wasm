// modgen
// python annotations describe the C types you need, argv is always a varialble size array of mp_obj_t.
// glue code will do its best to do the conversion or init.
//
// you *must* take care of return type yourself, glue code can only return None for you.

#ifndef __CPP__
#include <emscripten.h>
#endif

#include "py/emitglue.h"
#include "py/parse.h"
#include "py/lexer.h"
#include "py/compile.h"

#include <time.h>
#include <time.h>
#include <dlfcn.h>

#include "py/smallint.h"

struct timespec ts;

extern mp_lexer_t* mp_lexer_new_from_file(const char *filename);
#if MICROPY_PERSISTENT_CODE_SAVE
extern void mp_raw_code_save_file(mp_raw_code_t *rc, const char *filename);
// Save .mpy file to file system
int raw_code_save_file(mp_raw_code_t *rc, const char *filename) {  return 0; }
#endif

mp_obj_t execute_from_str(const char *str) {
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
        qstr src_name = 1/*MP_QSTR_*/;
        mp_lexer_t *lex = mp_lexer_new_from_str_len(src_name, str, strlen(str), false);
        mp_parse_tree_t pt = mp_parse(lex, MP_PARSE_FILE_INPUT);
        mp_obj_t module_fun = mp_compile(&pt, src_name, MP_EMIT_OPT_NONE, false);
        mp_call_function_0(module_fun);
        nlr_pop();
        return 0;
    } else {
        // uncaught exception
        return (mp_obj_t)nlr.ret_val;
    }
}



STATIC void coropass(void) {
    const char sched[] =
        "__module__ = __import__('sys').modules.get('asyncio',None);"
        "__module__ = __module__ and __module__.get_event_loop().step()";

    const char *sched_ptr = &sched[0];
    execute_from_str( sched_ptr);
    MP_STATE_PORT(coro_call_counter++);
}



def os_write( data : const_char_p = "{}" ) -> void :
    fprintf( stderr, "embed.os_write(%lu)\n", strlen(data) );
    fprintf( stdout , "%s\n" , data );



def vars(module_obj : mp_obj_t = None ) -> dict:
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
    return mod_globals;


def os_compile(source_file : const_char_p="", mpy_file : const_char_p="") -> void:
    vstr_t vstr;

    if (argc == 2 && argv[1] != mp_const_none) {
        //done by glue code
    } else {
        vstr_init(&vstr, strlen(source_file) + 5);  // +5 for NUL and .mpy
        vstr_add_str(&vstr, source_file);
        if (vstr.len > 3 && memcmp(&vstr.buf[vstr.len - 3], ".py", 3) == 0) {
            // remove .py extension to replace with .mpy
            vstr_cut_tail_bytes(&vstr, 3);
        }
        vstr_add_str(&vstr, ".mpy");
        mpy_file = vstr_null_terminated_str(&vstr);
    }
    #if MICROPY_PERSISTENT_CODE_SAVE
    mp_lexer_t *lex = mp_lexer_new_from_file(source_file);
    mp_parse_tree_t parse_tree = mp_parse(lex, MP_PARSE_FILE_INPUT);

    mp_raw_code_t *rc = mp_compile_to_raw_code(&parse_tree,
                                               qstr_from_str(source_file),
                                               MP_EMIT_OPT_NONE,
                                               false);

    mp_raw_code_save_file(rc, mpy_file);
    #else
    fprintf(stderr,"os_compile: MICROPY_PERSISTENT_CODE_SAVE not enabled\n");
    #endif



def os_hook() ->void:
    void (*void_ptr)(int) = MP_STATE_PORT(PyOS_InputHook);
    if ( void_ptr != NULL ) {
        printf("PyOS_InputHook %p TODO: allow py callback ptr\n", void_ptr);
    } else {
        printf("PyOS_InputHook undef TODO: allow py callback ptr\n");
        if ( !MP_STATE_PORT(coro_call_counter)) {
            MP_STATE_PORT(PyOS_InputHook) = &coropass ;
            printf("coro task started\n");
            coropass();
        }
    }

// https://www.python.org/dev/peps/pep-0564/
//    https://vstinner.github.io/python37-pep-564-nanoseconds.html
def time_ns() -> int:
      clock_gettime(CLOCK_MONOTONIC, &ts);
      //unsigned long ul = ts.tv_nsec ;
      return mp_obj_new_int_from_uint( ts.tv_nsec );

// upy
def time_ms() -> int:
    clock_gettime(CLOCK_MONOTONIC, &ts);
    //unsigned long ul = ts.tv_nsec * 1000000 ;
    return mp_obj_new_int_from_uint( ts.tv_nsec * 1000000);

def ticks_add(ticks : int=0, delta : int=0)->int:
    return mp_obj_new_int_from_uint( ticks + delta );


def sleep_ms(ms : int =0) -> void :
    emscripten_sleep_with_yield( ms );

def ticks_period() -> int:
    return mp_obj_new_int_from_uint( MICROPY_PY_UTIME_TICKS_PERIOD );


// TODO: remove after tests


def os_read() -> bytes:
    // simple read string

    static char buf[256];
    //fputs(p, stdout);
    char *s = fgets(buf, sizeof(buf), stdin);
    if (!s) {
        //return mp_obj_new_int(0);
        buf[0]=0;
        fprintf(stderr,"embed.os_read EOF\n" );
    } else {
        int l = strlen(buf);
        if (buf[l - 1] == '\n') {
            if ( (l>1) && (buf[l - 2] == '\r') )
                buf[l - 2] = 0;
            else
                buf[l - 1] = 0;
        } else {
            l++;
        }
        fprintf(stderr,"embed.os_read [%s]\n", buf );
    }
    return bytes(buf);
    # py comment #1


def echosum1(num : int=0) -> int:
    return MP_OBJ_NEW_SMALL_INT(num+1);

# py comment #2

def callsome(fn : void=npe) -> void:
    (*fn)();


def somecall(s:str='pouet'):
    fprintf(stderr, "FPRINTF[%s]\n", mp_obj_str_get_str(s) );
    print(s);

// c comment #3

