Micropython on wasm platform
----------------------------

Some Python file operations are synchronous and won't fit in javascript async I/O system
without performance sacrifice ( using EMTERPRETER ) or changing python code ( using asyncio file operation ).

some of them include :

    os.path.exists()
    open()
    file.read()
    os.stat()
    os.path.getsize()





It's still possible - if files are reasonably small and fast to access - to add synchronous operations to micropython
via a cache system to add script compatibility .
given some restrictions.

    os.path.exists() will hammer http server via HEAD instead of GET, so results should be cached. Polling should not be used.

    open() a file means downloading it entirely in a blocking manner.
    open() must be the first operation called.


    any other file operation will then success.




You will need to provide two functions in your js loader.
These are provided as examples and only cover some usefull cases.

window.urls = {}
window.urls.index = 0


function wasm_file_open(url, cachefile){
    // will get a file and store it into cachefile filename
    // or an autogenerated name.
    // returns either file size >=0  or -1 for error.

    try {
        if (url[0]==":")
            url = url.substr(1)
        else {
            // do some tests there for your CORS integration
            // [TODO]
        }

        var ab = awfull_get(url)
        var ret = ab.length

        window.urls.index += 1
        if (!cachefile){
            cachefile = "cache_"+window.urls.index
            ret = window.urls.index
        }
        FS.createDataFile("/", cachefile, ab, true, true);
        return ret
    } catch (x) {
        console.log("wasm_file_open :"+x)
        return -1
    }
}



function wasm_file_exists(url, need_dot) {
    // the need_dot parameter is for preventing package import lookup
    // when hooking file support into import system.
    // also some hosts could send html on directory hit.

    if (need_dot) {
        need_dot = url.split('.').pop()
        if (need_dot==url) {
            //console.log("wasm_file_exists not-a-file :"+url)
            return -1
        }
        //console.log("wasm_file_exists ? :"+url)
    }

    var xhr = new XMLHttpRequest()
    xhr.open('HEAD', url, false)
    xhr.send()
    var ret=-1
    if (xhr.status == 200 )
        ret=1
    //console.log(ret)
    return ret
}

